// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

// Defines values for Permission.
const (
	PermissionAuto        Permission = 6
	PermissionAutoEnabled Permission = 7
	PermissionDisabled    Permission = 0
	PermissionEnabled     Permission = 1
	PermissionGoal        Permission = 2
)

// Bounce Send this message to the server, tell it which clients should receive
// the message and the server will forward the message to all those targets
// to which any one requirement applies.
type Bounce = map[string]interface{}

// Bounced Sent to clients after a client requested this message be sent to them, more info in the Bounce package.
type Bounced = map[string]interface{}

// Connect Sent by the client to initiate a connection to an Archipelago game session.
type Connect = map[string]interface{}

// ConnectUpdate Update arguments from the Connect package, currently only updating tags and items_handling is supported.
type ConnectUpdate = map[string]interface{}

// Connected Sent to clients when the connection handshake is successfully completed.
type Connected = map[string]interface{}

// ConnectionRefused Sent to clients when the server refuses connection.
// This is sent during the initial connection handshake.
type ConnectionRefused = map[string]interface{}

// DataPackage Sent to clients to provide what is known as a 'data package' which contains
// information to enable a client to most easily communicate with the Archipelago server.
// Contents include things like location id to name mappings,
// among others; see Data Package Contents for more info.
type DataPackage = map[string]interface{}

// Get Used to request a single or multiple values from the server's data
// storage, see the Set package for how to write values to the data storage.
// A Get package will be answered with a Retrieved package.
type Get = map[string]interface{}

// GetDataPackage Requests the data package from the server.
// Does not require client authentication.
type GetDataPackage = map[string]interface{}

// InvalidPacket Sent to clients if the server caught a problem with a packet.
// This only occurs for errors that are explicitly checked for.
type InvalidPacket = map[string]interface{}

// LocationChecks Sent to server to inform it of locations that the client has checked. Used to inform the server of new checks that are made, as well as to sync state.
type LocationChecks = map[string]interface{}

// LocationInfo Sent to clients to acknowledge a received LocationScouts packet and
// responds with the item in the location(s) being scouted.
type LocationInfo = map[string]interface{}

// LocationScouts Sent to the server to retrieve the items that are on a specified list of locations.
// The server will respond with a LocationInfo packet containing the items located in the
// scouted locations. Fully remote clients without a patch file may use this to
// "place" items onto their in-game locations, most commonly to display their
// names or item classifications before/upon pickup.
//
// LocationScouts can also be used to inform the server of
// locations the client has seen, but not checked.
// This creates a hint as if the player had run !hint_location on a location,
// but without deducting hint points. This is useful in cases where an item appears
// in the game world, such as 'ledge items' in A Link to the Past.
// To do this, set the create_as_hint parameter to a non-zero value.
type LocationScouts = map[string]interface{}

// NetworkVersion An object representing software versioning. Used in the Connect packet to allow the client to inform the server of the Archipelago version it supports.
type NetworkVersion struct {
	Build *int `json:"build,omitempty"`
	Major *int `json:"major,omitempty"`
	Minor *int `json:"minor,omitempty"`
}

// Permission An enumeration containing the possible command permission, for commands that may be restricted.
type Permission int

// PrintJSON Sent to clients purely to display a message to the player.
// While various message types provide additional arguments,
// clients only need to evaluate the data argument to construct
// the human-readable message text.
// All other arguments may be ignored safely.
type PrintJSON = map[string]interface{}

// ReceivedItems Sent to clients when they receive an item.
type ReceivedItems = map[string]interface{}

// Retrieved Sent to clients as a response the a Get package.
type Retrieved = map[string]interface{}

// RoomInfo Sent to clients when they connect to an Archipelago server.
type RoomInfo struct {
	// DatapackageChecksums Checksum hash of the individual games' data packages the server will send. Used by newer clients to decide which games' caches are outdated. See Data Package Contents for more information.
	DatapackageChecksums map[string]string `json:"datapackage_checksums"`

	// Games List of games present in this multiworld.
	Games []string `json:"games"`

	// GeneratorVersion Object denoting the version of Archipelago which generated the multiworld.
	GeneratorVersion NetworkVersion `json:"generator_version"`

	// HintCost The percentage of total locations that need to be checked to receive a hint from the server.
	HintCost int `json:"hint_cost"`

	// LocationCheckPoints The amount of hint points you receive per item/location check completed.
	LocationCheckPoints int `json:"location_check_points"`

	// Password Denoted whether a password is required to join this room.
	Password bool `json:"password"`

	// Permissions Mapping of permission name to Permission, keys are: "release", "collect" and "remaining".
	Permissions Permission `json:"permissions"`

	// SeedName Uniquely identifying name of this generation
	SeedName string `json:"seed_name"`

	// Tags Denotes special features or capabilities that the sender is capable of. Example: WebHost
	Tags []string `json:"tags"`

	// Time Unix time stamp of "now". Send for time synchronization if wanted for things like the DeathLink Bounce.
	Time float32 `json:"time"`

	// Version Object denoting the version of Archipelago which the server is running.
	Version NetworkVersion `json:"version"`
}

// RoomUpdate Sent when there is a need to update information about the present game session.
type RoomUpdate = map[string]interface{}

// Say Basic chat command which sends text to the server to be distributed to other clients.
type Say = map[string]interface{}

// Set Used to write data to the server's data storage, that data can then
// be shared across worlds or just saved for later. Values for keys
// in the data storage can be retrieved with a Get package, or monitored
// with a SetNotify package. Keys that start with _read_ cannot be set.
type Set = map[string]interface{}

// SetNotify Used to register your current session for receiving all SetReply
// packages of certain keys to allow your client to keep track of changes.
type SetNotify = map[string]interface{}

// SetReply Sent to clients in response to a Set package if want_reply was set to true,
// or if the client has registered to receive updates for a certain key using
// the SetNotify package. SetReply packages are sent even if a Set package
// did not alter the value for the key.
type SetReply = map[string]interface{}

// StatusUpdate Sent to the server to update on the sender's status.
// Examples include readiness or goal completion.
// (Example: defeated Ganon in A Link to the Past)
type StatusUpdate = map[string]interface{}

// Sync Sent to server to request a ReceivedItems packet to synchronize items.
type Sync = map[string]interface{}

// UpdateHint Sent to the server to update the status of a Hint.
// The client must be the 'receiving_player' of the Hint,
// or the update fails.
type UpdateHint = map[string]interface{}
