openapi: "3.1.0"
info:
  title: Archipelago API
  version: "1.0"
servers:
  - url: wss://archipelago.gg

components:
  schemas:
    Commands:
      type: array
      items:
        $ref: "#/components/schemas/Command"
    Command:
      type: object
      oneOf:
        - $ref: "#/components/schemas/RoomInfo"
        - $ref: "#/components/schemas/ConnectionRefused"
        - $ref: "#/components/schemas/Connected"
        - $ref: "#/components/schemas/ReceivedItems"
        - $ref: "#/components/schemas/LocationInfo"
        - $ref: "#/components/schemas/RoomUpdate"
        - $ref: "#/components/schemas/PrintJSON"
        - $ref: "#/components/schemas/DataPackage"
        - $ref: "#/components/schemas/Bounced"
        - $ref: "#/components/schemas/InvalidPacket"
        - $ref: "#/components/schemas/Retrieved"
        - $ref: "#/components/schemas/SetReply"
        - $ref: "#/components/schemas/Connect"
        - $ref: "#/components/schemas/ConnectUpdate"
        - $ref: "#/components/schemas/Sync"
        - $ref: "#/components/schemas/LocationChecks"
        - $ref: "#/components/schemas/LocationScouts"
        - $ref: "#/components/schemas/UpdateHint"
        - $ref: "#/components/schemas/StatusUpdate"
        - $ref: "#/components/schemas/Say"
        - $ref: "#/components/schemas/GetDataPackage"
        - $ref: "#/components/schemas/Bounce"
        - $ref: "#/components/schemas/Get"
        - $ref: "#/components/schemas/Set"
        - $ref: "#/components/schemas/SetNotify"
      discriminator:
        propertyName: "cmd"

    ####################
    # SERVER -> CLIENT #
    ####################
    RoomInfo:
      type: object
      description: |
        Sent to clients when they connect to an Archipelago server.
      required:
        - version
        - generator_version
        - tags
        - password
        - permissions
        - hint_cost
        - location_check_points
        - games
        - datapackage_checksums
        - seed_name
        - time
        - cmd
      properties:
        cmd:
          type: string
        version:
          description: |
            Object denoting the version of Archipelago which the server is running.
          allOf:
            - $ref: "#/components/schemas/NetworkVersion"
        generator_version:
          description: |
            Object denoting the version of Archipelago which generated the multiworld.
          allOf:
            - $ref: "#/components/schemas/NetworkVersion"
        tags:
          description: |
            Denotes special features or capabilities that the sender is capable of. Example: WebHost
          type: array
          items:
            $ref: "#/components/schemas/Tags"
        password:
          description: |
            Denoted whether a password is required to join this room.
          type: boolean
        permissions:
          description: |
            Mapping of permission name to Permission, keys are: "release", "collect" and "remaining".

            ## release
            Dictates what is allowed when it comes to a player releasing their run. A release is an action which distributes the rest of the items in a player's run to those other players awaiting them.
                auto: Distributes a player's items to other players when they complete their goal.
                enabled: Denotes that players may release at any time in the game.
                auto-enabled: Both of the above options together.
                disabled: All release modes disabled.
                goal: Allows for manual use of release command once a player completes their goal. (Disabled until goal completion)

            ## collect
            Dictates what is allowed when it comes to a player collecting their run. A collect is an action which sends the rest of the items in a player's run.
                auto: Automatically when they complete their goal.
                enabled: Denotes that players may !collect at any time in the game.
                auto-enabled: Both of the above options together.
                disabled: All collect modes disabled.
                goal: Allows for manual use of collect command once a player completes their goal. (Disabled until goal completion)

            ## remaining
            Dictates what is allowed when it comes to a player querying the items remaining in their run.
                goal: Allows a player to query for items remaining in their run but only after they completed their own goal.
                enabled: Denotes that players may query for any items remaining in their run (even those belonging to other players).
                disabled: All remaining item query modes disabled.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Permission"

        hint_cost:
          description: |
            The percentage of total locations that need to be checked to receive a hint from the server.
          type: integer
        location_check_points:
          description: |
            The amount of hint points you receive per item/location check completed.
          type: integer
        games:
          description: |
            List of games present in this multiworld.
          type: array
          items:
            type: string
        datapackage_checksums:
          description: |
            Checksum hash of the individual games' data packages the server will send. Used by newer clients to decide which games' caches are outdated. See Data Package Contents for more information.
          type: object
          additionalProperties:
            type: string
        seed_name:
          description: |
            Uniquely identifying name of this generation
          type: string
        time:
          description: |
            Unix time stamp of "now". Send for time synchronization if wanted for things like the DeathLink Bounce.
          type: number
    ConnectionRefused:
      type: object
      description: |
        Sent to clients when the server refuses connection. 
        This is sent during the initial connection handshake.
      required:
        - cmd
      properties:
        cmd:
          type: string
        errors:
          description: |
            Optional. When provided, should contain any one of: 
            InvalidSlot, InvalidGame, IncompatibleVersion, InvalidPassword, or InvalidItemsHandling.
          type: array
          items:
            $ref: "#/components/schemas/ConnectionRefusedError"
    Connected:
      type: object
      description: |
        Sent to clients when the connection handshake is successfully completed.
      required:
        - team
        - slot
        - players
        - missing_locations
        - checked_locations
        - slot_data
        - slot_info
        - hint_points
        - cmd
      properties:
        cmd:
          type: string
        team:
          description: Your team number. See NetworkPlayer for more info on team number.
          type: integer
        slot:
          description: Your slot number on your team. See NetworkPlayer for more info on the slot number.
          type: integer
        players:
          description: List denoting other players in the multiworld, whether connected or not.
          type: array
          items:
            $ref: "#/components/schemas/NetworkPlayer"
        missing_locations:
          description: Contains ids of remaining locations that need to be checked. Useful for trackers, among other things.
          type: array
          items:
            type: integer
        checked_locations:
          description: Contains ids of all locations that have been checked. Useful for trackers, among other things. Location ids are in the range of Â± 253-1.
          type: array
          items:
            type: integer
        slot_data:
          description: Contains a json object for slot related data, differs per game. Empty if not required. Not present if slot_data in Connect is false.
          type: object
          additionalProperties: true
        slot_info:
          description: maps each slot to a NetworkSlot information.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/NetworkSlot"
          x-go-type: map[int]NetworkSlot
        hint_points:
          description: Number of hint points that the current player has.
          type: integer
    ReceivedItems:
      type: object
      description: |
        Sent to clients when they receive an item.
      required:
        - index
        - items
        - cmd
      properties:
        cmd:
          type: string
        index:
          description: The next empty slot in the list of items for the receiving client.
          type: integer
        items:
          description: The items which the client is receiving.
          type: array
          items:
            $ref: "#/components/schemas/NetworkItem"
    LocationInfo:
      type: object
      description: |
        Sent to clients to acknowledge a received LocationScouts packet and 
        responds with the item in the location(s) being scouted.
      required:
        - locations
        - cmd
      properties:
        cmd:
          type: string
        locations:
          description: Contains list of item(s) in the location(s) scouted
          type: array
          items:
            $ref: "#/components/schemas/NetworkItem"
    RoomUpdate:
      type: object
      description: |
        Sent when there is a need to update information about the present game session.
        All arguments for this packet are optional, only changes are sent.
      required:
        - cmd
      properties:
        cmd:
          type: string
        players:
          description: Sent in the event of an alias rename. Always sends all players, whether connected or not.
          type: array
          items:
            $ref: "#/components/schemas/NetworkPlayer"
        checked_locations:
          description: May be a partial update, containing new locations that were checked, especially from a coop partner in the same slot.
          type: array
          items:
            type: integer
        missing_locations:
          description: Never sent in this packet. If needed, it is the inverse of checked_locations.
          type: object
    PrintJSON:
      type: object
      description: |
        Sent to clients purely to display a message to the player. 
        While various message types provide additional arguments, 
        clients only need to evaluate the data argument to construct 
        the human-readable message text. 
        All other arguments may be ignored safely.
      required:
        - data
        - cmd
      properties:
        cmd:
          type: string
        data:
          description: |
            Message Type: (all)
            Textual content of this message
          type: array
          items:
            $ref: "#/components/schemas/JSONMessagePart"
        type:
          description: |
            Message Type: (all)
            PrintJsonType of this message (optional)
          allOf:
            - $ref: "#/components/schemas/PrintJsonType"
        receiving:
          description: |
            Message Type: ItemSend, ItemCheat, Hint
            Destination player's ID
          type: integer
        item:
          description: |
            Message Type: NetworkItem 	ItemSend, ItemCheat, Hint
            Source player's ID, location ID, item ID and item flags
          allOf:
            - $ref: "#/components/schemas/NetworkItem"
        found:
          description: |
            Message Type: Hint
            Whether the location hinted for was checked
          type: boolean
        team:
          description: |
            Message Type: Join, Part, Chat, TagsChanged, Goal, Release, Collect, ItemCheat
            Team of the triggering player
          type: integer
        slot:
          description: |
            Message Type: Join, Part, Chat, TagsChanged, Goal, Release, Collect
            Slot of the triggering player
          type: integer
        message:
          description: |
            Message Type: Chat, ServerChat
            Original chat message without sender prefix
          type: string
        tags:
          description: |
            Message Type: Join, TagsChanged
            Tags of the triggering player
          type: array
          items:
            $ref: "#/components/schemas/Tags"
        countdown:
          description: |
            Message Type: Countdown
            Amount of seconds remaining on the countdown
          type: integer
    DataPackage:
      type: object
      description: |
        Sent to clients to provide what is known as a 'data package' which contains 
        information to enable a client to most easily communicate with the Archipelago server. 
        Contents include things like location id to name mappings, 
        among others; see Data Package Contents for more info.
      required:
        - data
        - cmd
      properties:
        cmd:
          type: string
        data:
          description: The data package as a JSON object.
          allOf:
            - $ref: "#/components/schemas/DataPackageObject"
    Bounced:
      type: object
      description: |
        Sent to clients after a client requested this message be sent to them, more info in the Bounce package.
      required:
        - data
        - cmd
      properties:
        cmd:
          type: string
        games:
          description: Optional. Game names this message is targeting
          type: array
          items:
            type: string
        slots:
          description: Optional. Player slot IDs that this message is targeting
          type: array
          items:
            type: string
        tags:
          description: Optional. Client Tags this message is targeting
          type: array
          items:
            $ref: "#/components/schemas/Tags"
        data:
          description: The data in the Bounce package copied
          type: object
          additionalProperties: true
    InvalidPacket:
      type: object
      description: |
        Sent to clients if the server caught a problem with a packet. 
        This only occurs for errors that are explicitly checked for.
      required:
        - type
        - text
        - cmd
      properties:
        cmd:
          type: string
        type:
          description: The PacketProblemType that was detected in the packet.
          allOf:
            - $ref: "#/components/schemas/PacketProblemType"

        original_cmd:
          description: The cmd argument of the faulty packet, will be None if the cmd failed to be parsed.
          type: string
        text:
          description: A descriptive message of the problem at hand.
          type: string
    Retrieved:
      type: object
      description: |
        Sent to clients as a response the a Get package.

        If a requested key was not present in the server's data, the associated value will be null.

        Additional arguments added to the Get package that triggered this Retrieved will also be passed along.
      required:
        - keys
        - cmd
      properties:
        cmd:
          type: string
        keys:
          description: A key-value collection containing all the values for the keys requested in the Get package.
          type: object
          additionalProperties: true
    SetReply:
      type: object
      description: |
        Sent to clients in response to a Set package if want_reply was set to true, 
        or if the client has registered to receive updates for a certain key using 
        the SetNotify package. SetReply packages are sent even if a Set package 
        did not alter the value for the key.

        Additional arguments added to the Set package that triggered this SetReply will also be passed along.
      required:
        - key
        - value
        - cmd
      properties:
        cmd:
          type: string
        key:
          description: The key that was updated.
          type: string
        value:
          description: The new value for the key.
        original_value:
          description: The value the key had before it was updated. Not present on "_read" prefixed special keys.

    ####################
    # CLIENT -> SERVER #
    ####################

    Connect:
      type: object
      description: |
        Sent by the client to initiate a connection to an Archipelago game session.
      required:
        - cmd
        - password
        - game
        - name
        - uuid
        - version
        - items_handling
        - tags
        - slot_data
      properties:
        cmd:
          type: string
        password:
          description: |
            If the game session requires a password, it should be passed here.
          type: string
        game:
          description: |
            The name of the game the client is playing. Example: A Link to the Past
          type: string
        name:
          description: |
            The player name for this client.
          type: string
        uuid:
          description: |
            Unique identifier for player client.
          type: string
        version:
          description: |
            An object representing the Archipelago version this client supports.
          allOf:
            - $ref: "#/components/schemas/NetworkVersion"
        items_handling:
          description: |
            Flags configuring which items should be sent by the server. Read below for individual flags.
          allOf:
            - $ref: "#/components/schemas/ItemHandlingFlag"
        tags:
          description: |
            Denotes special features or capabilities that the sender is capable of. Tags
          type: array
          items:
            $ref: "#/components/schemas/Tags"
        slot_data:
          description: |
            If true, the Connect answer will contain slot_data
          type: boolean

    ConnectUpdate:
      type: object
      description: |
        Update arguments from the Connect package, currently only updating tags and items_handling is supported.
      required:
        - cmd
        - items_handling
        - tags
      properties:
        cmd:
          type: string
        items_handling:
          description: |
            Flags configuring which items should be sent by the server.
          allOf:
            - $ref: "#/components/schemas/ItemHandlingFlag"
        tags:
          description: |
            Denotes special features or capabilities that the sender is capable of. Tags
          type: array
          items:
            $ref: "#/components/schemas/Tags"
    Sync:
      type: object
      description: |
        Sent to server to request a ReceivedItems packet to synchronize items.
      required:
        - cmd
      properties:
        cmd:
          type: string
    LocationChecks:
      type: object
      description: |
        Sent to server to inform it of locations that the client has checked. 
        Used to inform the server of new checks that are made, as well as to sync state.
      required:
        - cmd
        - locations
      properties:
        cmd:
          type: string
        locations:
          description: |
            The ids of the locations checked by the client. 
            May contain any number of checks, even ones sent before; 
            duplicates do not cause issues with the Archipelago server.
          type: array
          items:
            type: integer
    LocationScouts:
      type: object
      description: |
        Sent to the server to retrieve the items that are on a specified list of locations. 
        The server will respond with a LocationInfo packet containing the items located in the
        scouted locations. Fully remote clients without a patch file may use this to 
        "place" items onto their in-game locations, most commonly to display their 
        names or item classifications before/upon pickup.

        LocationScouts can also be used to inform the server of 
        locations the client has seen, but not checked. 
        This creates a hint as if the player had run !hint_location on a location, 
        but without deducting hint points. This is useful in cases where an item appears 
        in the game world, such as 'ledge items' in A Link to the Past. 
        To do this, set the create_as_hint parameter to a non-zero value.
      required:
        - cmd
        - locations
      properties:
        cmd:
          type: string
        locations:
          description: |
            The ids of the locations seen by the client. 
            May contain any number of locations, even ones sent before; 
            duplicates do not cause issues with the Archipelago server.
          type: array
          items:
            type: integer
        create_as_hint:
          description: |
            If non-zero, the scouted locations get created and broadcasted as a player-visible hint.
            If 2 only new hints are broadcast, however this does not remove them from the LocationInfo reply.
          type: integer
    UpdateHint:
      type: object
      description: |
        Sent to the server to update the status of a Hint. 
        The client must be the 'receiving_player' of the Hint, 
        or the update fails.
      required:
        - cmd
        - player
        - location
      properties:
        cmd:
          type: string
        player:
          description: The ID of the player whose location is being hinted for.
          type: integer
        location:
          description: The ID of the location to update the hint for. If no hint exists for this location, the packet is ignored.
          type: integer
        status:
          description: If included, sets the status of the hint to this status. Cannot set HINT_FOUND, or change the status from HINT_FOUND.
          allOf:
            - $ref: "#/components/schemas/HintStatus"

    StatusUpdate:
      type: object
      description: |
        Sent to the server to update on the sender's status. 
        Examples include readiness or goal completion. 
        (Example: defeated Ganon in A Link to the Past)
      required:
        - cmd
        - status
      properties:
        cmd:
          type: string
        status:
          description: One of Client States. Send as int. Follow the link for more information.
          allOf:
            - $ref: "#/components/schemas/ClientStatus"
    Say:
      type: object
      description: |
        Basic chat command which sends text to the server to be distributed to other clients.
      required:
        - cmd
        - text
      properties:
        cmd:
          type: string
        text:
          description: Text to send to others.
          type: string
    GetDataPackage:
      type: object
      description: |
        Requests the data package from the server. 
        Does not require client authentication.
      required:
        - cmd
      properties:
        cmd:
          type: string
        games:
          description: If specified, will only send back the specified data. Such as, ["Factorio"] -> Datapackage with only Factorio data.
          type: array
          items:
            type: string
    Bounce:
      type: object
      description: |
        Send this message to the server, tell it which clients should receive 
        the message and the server will forward the message to all those targets 
        to which any one requirement applies.
      required:
        - cmd
        - data
      properties:
        cmd:
          type: string
        games:
          description: Optional. Game names this message is targeting
          type: array
          items:
            type: string
        slots:
          description: Optional. Player slot IDs that this message is targeting
          type: array
          items:
            type: string
        tags:
          description: Optional. Client Tags this message is targeting
          type: array
          items:
            $ref: "#/components/schemas/Tags"
        data:
          description: The data in the Bounce package copied
          type: object
          additionalProperties: true
    Get:
      type: object
      description: |
        Used to request a single or multiple values from the server's data 
        storage, see the Set package for how to write values to the data storage. 
        A Get package will be answered with a Retrieved package.
      required:
        - cmd
      properties:
        cmd:
          type: string
        keys:
          description: |
            Keys to retrieve the values for.
            Additional arguments sent in this package will also be added to the Retrieved package it triggers.

            Some special keys exist with specific return data, all of them have the prefix _read_, so hints_{team}_{slot} is _read_hints_{team}_{slot}.
            - hints_{team}_{slot} | list[Hint] | All Hints belonging to the requested Player.
            - slot_data_{slot} | dict[str, any] | slot_data belonging to the requested slot.
            - item_name_groups_{game_name} | dict[str, list[str]] | item_name_groups belonging to the requested game.
            - location_name_groups_{game_name} | dict[str, list[str]] | location_name_groups belonging to the requested game.
            - client_status_{team}_{slot} | ClientStatus | The current game status of the requested player.
            - race_mode | int | 0 if race mode is disabled, and 1 if it's enabled.
          type: array
          items:
            type: string
    Set:
      type: object
      description: |
        Used to write data to the server's data storage, that data can then 
        be shared across worlds or just saved for later. Values for keys 
        in the data storage can be retrieved with a Get package, or monitored 
        with a SetNotify package. Keys that start with _read_ cannot be set.
      required:
        - cmd
      properties:
        cmd:
          type: string
        key:
          description: The key to manipulate. Can never start with "_read".
          type: string
        default:
          description: The default value to use in case the key has no value on the server.
        want_reply:
          description: If true, the server will send a SetReply response back to the client.
          type: boolean
        operations:
          description: Operations to apply to the value, multiple operations can be present and they will be executed in order of appearance.
          type: array
          items:
            $ref: "#/components/schemas/DataStorageOperation"
    SetNotify:
      type: object
      description: |
        Used to register your current session for receiving all SetReply 
        packages of certain keys to allow your client to keep track of changes.
      required:
        - cmd
      properties:
        cmd:
          type: string
        keys:
          description: |
            Keys to receive all SetReply packages for.
          type: array
          items:
            type: string

    ############
    # SUBTYPES #
    ############

    NetworkVersion:
      type: object
      description:
        An object representing software versioning. Used in the Connect packet to
        allow the client to inform the server of the Archipelago version it supports.
      properties:
        major:
          type: integer
        minor:
          type: integer
        build:
          type: integer
    JSONMessagePart:
      description: |
        Message nodes sent along with PrintJSON packet to be reconstructed into a legible message. 
        The nodes are intended to be read in the order they are listed in the packet.
      type: object
      required:
        - type
        - text
      properties:
        type:
          $ref: "#/components/schemas/JSONMessagePartType"
        text:
          type: string
        color:
          description: only available if type is a color
          allOf:
            - $ref: "#/components/schemas/JSONMessagePartColor"
        flags:
          description: only available if type is an item_id or item_name
          type: integer
        player:
          description: only available if type is either item or location
          type: integer
    NetworkPlayer:
      description: |
        A list of objects. Each object denotes one player. 
        Each object has four fields about the player, in this order: 
        team, slot, alias, and name. team and slot are ints, alias and name are strs.

        Each player belongs to a team and has a slot. Team numbers start at 0. 
        Slot numbers are unique per team and start at 1. 
        Slot number 0 refers to the Archipelago server; 
        this may appear in instances where the server grants the player an item.

        Alias represents the player's name in current time. 
        Name is the original name used when the session was generated. 
        This is typically distinct in games which require baking names into ROMs or for async games.
      type: object
      required:
        - team
        - slot
        - alias
        - name
      properties:
        team:
          type: integer
          description: Team numbers start at 0
        slot:
          type: integer
          description: |
            Slot numbers are unique per team and start at 1. 
            Slot number 0 refers to the Archipelago server; 
            this may appear in instances where the server grants the player an item
        alias:
          type: string
          description: represents the player's name in current time.
        name:
          type: string
          description: |
            The original name used when the session was generated. 
            This is typically distinct in games which require baking names into ROMs or for async games.
    NetworkItem:
      type: object
      description: |
        Items that are sent over the net (in packets) use the following data structure and are sent as objects:
      required:
        - item
        - location
        - player
        - flags
      properties:
        item:
          description: |
            The item id of the item. 
            Item ids are only supported in the range of [-253, 253 - 1]. 
            Anything â¤ 0 is reserved for Archipelago use.
          type: integer
        location:
          description: |
            The location id of the item inside the world. 
            Location ids are only supported in the range of [-253, 253 - 1]. 
            Anything â¤ 0 reserved for Archipelago use.
          type: integer
        player:
          description: |
            The player slot of the world the item is located in, 
            except when inside an LocationInfo Packet then it 
            will be the slot of the player to receive the item.
          type: integer
        flags:
          $ref: "#/components/schemas/NetworkItemFlags"
    NetworkSlot:
      description: An object representing static information about a slot.
      type: object
      required:
        - name
        - game
        - type
        - group_members
      properties:
        name:
          type: string
        game:
          type: string
        type:
          $ref: "#/components/schemas/SlotType"
        group_members:
          description: only populated if type == group
          type: array
          items:
            type: integer

    Hint:
      type: object
      description: An object representing a Hint.
      required:
        - receiving_player
        - finding_player
        - location
        - item
        - found
        - entrance
        - item_flags
        - status
      properties:
        receiving_player:
          type: integer
        finding_player:
          type: integer
        location:
          type: integer
        item:
          type: integer
        found:
          type: boolean
        entrance:
          type: string
        item_flags:
          type: integer
        status:
          $ref: "#/components/schemas/HintStatus"
    DataStorageOperation:
      type: object
      description: |
        A DataStorageOperation manipulates or alters the value of a key in the data storage. 
        If the operation transforms the value from one state to another then the current 
        value of the key is used as the starting point otherwise the Set's package default 
        is used if the key does not exist on the server already. 
        DataStorageOperations consist of an object containing both the operation to be applied, 
        provided in the form of a string, as well as the value to be used for that operation
      required:
        - operation
      properties:
        operation:
          description: the operation to be applied
          allOf:
            - ref: "#/components/schemas/OperationKey"
        value:
          description: the value used by the operation. Operation key dependant.
    DataPackageObject:
      type: object
      required:
        - games
      properties:
        games:
          description: Mapping of all Games and their respective data
          type: object
          additionalProperties:
            $ref: "#/components/schemas/GameData"

    GameData:
      type: object
      required:
        - item_name_to_id
        - location_name_to_id
        - checksum
      properties:
        item_name_to_id:
          type: object
          description: Mapping of all item names to their respective ID.
          additionalProperties:
            type: integer
        location_name_to_id:
          description: Mapping of all location names to their respective ID.
          type: object
          additionalProperties:
            type: integer
        checksum:
          description: A checksum hash of this game's data.
          type: string
    DeathLink:
      required:
        - time
        - source
      properties:
        time:
          type: number
          description: Unix Time Stamp of time of death.
        cause:
          type: string
          description: Optional. Text to explain the cause of death. When provided, or checked, this should contain the player name, ex. "Berserker was run over by a train."
        source:
          type: string
          description: Name of the player who first died. Can be a slot name, but can also be a name from within a multiplayer game.
    #########
    # ENUMS #
    #########
    Tags:
      type: string
      enum:
        - AP
        - DeathLink
        - HintGame
        - Tracker
        - TextOnly
      x-enum-varnames:
        - TagValueAP
        - TagValueDeathLink
        - TagValueHintGame
        - TagValueTracker
        - TagValueTextOnly
      x-enum-descriptions:
        - Signifies that this client is a reference client, its usefulness is mostly in debugging to compare client behaviours more easily.
        - Client participates in the DeathLink mechanic, therefore will send and receive DeathLink bounce packets.
        - Indicates the client is a hint game, made to send hints instead of locations. Special join/leave message, game is optional.
        - Indicates the client is a tracker, made to track instead of sending locations. Special join/leave message, game is optional.
        - Indicates the client is a basic client, made to chat instead of sending locations. Special join/leave message, game is optional.
    SlotType:
      type: integer
      description: An enum representing the nature of a slot.
      enum:
        - 0b00
        - 0b01
        - 0b10
      x-enum-varnames:
        - SlotTypeSpectator
        - SlotTypePlayer
        - SlotTypeGroup
    NetworkItemFlags:
      type: integer
      description: Flags used in the NetworkItem
      enum:
        - 0b000
        - 0b001
        - 0b010
        - 0b100
      x-enum-varnames:
        - NetworkItemFlagEmpty
        - NetworkItemFlagLogicalAdvancement
        - NetworkItemFlagImportant
        - NetworkItemFlagTrap
      x-enum-descriptions:
        - 0, Nothing special about this item
        - 1, If set, indicates the item can unlock logical advancement
        - 2, If set, indicates the item is important but not in a way that unlocks advancement
        - 4, If set, indicates the item is a trap

    Permission:
      type: integer
      description: |
        An enumeration containing the possible command permission, for commands that may be restricted.
      enum:
        - 0b000
        - 0b001
        - 0b010
        - 0b110
        - 0b111
      x-enum-varnames:
        - PermissionDisabled
        - PermissionEnabled
        - PermissionGoal
        - PermissionAuto
        - PermissionAutoEnabled
      x-enum-descriptions:
        - 0, completely disables access
        - 1, allows manual use
        - 2, allows manual use after goal completion
        - 6, forces use after goal completion, only works for release and collect
        - 7, forces use after goal completion, allows manual use any time
    ConnectionRefusedError:
      type: string
      description: The potential error values that can be returned in the list of errors in a connection refused.
      enum:
        - InvalidSlot
        - InvalidGame
        - IncompatibleVersion
        - InvalidPassword
        - InvalidItemsHandling
      x-enum-varnames:
        - ConnectionRefusedInvalidSlot
        - ConnectionRefusedInvalidGame
        - ConnectionRefusedIncompatibleVersion
        - ConnectionRefusedInvalidPassword
        - ConnectionRefusedInvalidItemsHandling
      x-enum-descriptions:
        - InvalidSlot is returned as a connection refused error when the slot was invalid
        - InvalidGame is returned as a connection refused error when the game was invalid
        - IncompatibleVersion is returned as a connection refused error when the versions were incompatible
        - InvalidPassword is returned as a connection refused error when the password was incorrect
        - InvalidItemsHandling is returned as a connection refused error when there was a error with item handling
    PrintJsonType:
      description: |
        PrintJsonType indicates the type of a PrintJSON packet. 
        Different types can be handled differently by the client and can also contain additional arguments. 
        When receiving an unknown or missing type, the data's list[JSONMessagePart] should still be displayed to the player as normal text.
      type: string
      enum:
        - ItemSend
        - ItemCheat
        - Hint
        - Join
        - Part
        - Chat
        - ServerChat
        - Tutorial
        - TagsChanged
        - CommandResult
        - AdminCommandResult
        - Goal
        - Release
        - Collect
        - Countdown
      x-enum-descriptions:
        - A player received an item.
        - A player used the !getitem command.
        - A player hinted.
        - A player connected.
        - A player disconnected.
        - A player sent a chat message.
        - The server broadcasted a message.
        - The client has triggered a tutorial message, such as when first connecting.
        - A player changed their tags.
        - Someone (usually the client) entered an ! command.
        - The client entered an !admin command.
        - A player reached their goal.
        - A player released the remaining items in their world.
        - A player collected the remaining items for their world.
        - The current server countdown has progressed.
      x-enum-varnames:
        - PrintJsonTypeItemSend
        - PrintJsonTypeItemCheat
        - PrintJsonTypeHint
        - PrintJsonTypeJoin
        - PrintJsonTypePart
        - PrintJsonTypeChat
        - PrintJsonTypeServerChat
        - PrintJsonTypeTutorial
        - PrintJsonTypeTagsChanged
        - PrintJsonTypeCommandResult
        - PrintJsonTypeAdminCommandResult
        - PrintJsonTypeGoal
        - PrintJsonTypeRelease
        - PrintJsonTypeCollect
        - PrintJsonTypeCountdown
    PacketProblemType:
      type: string
      enum:
        - cmd
        - arguments
      x-enum-descriptions:
        - cmd argument of the faulty packet that could not be parsed correctly.
        - Arguments of the faulty packet which were not correct.
      x-enum-varnames:
        - PacketProblemTypeCmd
        - PacketProblemTypeArguments
    JSONMessagePartType:
      description: |
        type is used to denote the intent of the message part. 
        This can be used to indicate special information which may be rendered differently depending on client. 
        How these types are displayed in Archipelago's ALttP client is not the end-all be-all. 
        Other clients may choose to interpret and display these messages differently.
      type: string
      enum:
        - text
        - player_id
        - player_name
        - item_id
        - item_name
        - location_id
        - location_name
        - entrance_name
        - color
      x-enum-varnames:
        - JsonMessagePartTypeText
        - JsonMessagePartTypePlayerID
        - JsonMessagePartTypePlayerName
        - JsonMessagePartTypeItemID
        - JsonMessagePartTypeItemName
        - JsonMessagePartTypeLocationID
        - JsonMessagePartTypeLocationName
        - JsonMessagePartTypeEntranceName
        - JsonMessagePartTypeColor
      x-enum-descriptions:
        - Regular text content. Is the default type and as such may be omitted.
        - player ID of someone on your team, should be resolved to Player Name
        - Player Name, could be a player within a multiplayer game or from another team, not ID resolvable
        - Item ID, should be resolved to Item Name
        - Item Name, not currently used over network, but supported by reference Clients.
        - Location ID, should be resolved to Location Name
        - Location Name, not currently used over network, but supported by reference Clients.
        - Entrance Name. No ID mapping exists.
        - Regular text that should be colored. Only type that will contain color data.
    JSONMessagePartColor:
      description:
        Color is used to denote a console color to display the message part with and is only send if the type is color.
        This is limited to console colors due to backwards compatibility needs with games such as ALttP.
        Although background colors as well as foreground colors are listed, only one may be applied to a JSONMessagePart at a time.
      type: string
      enum:
        - bold
        - underline
        - black
        - red
        - green
        - yellow
        - blue
        - magenta
        - cyan
        - white
        - black_bg
        - red_bg
        - green_bg
        - yellow_bg
        - blue_bg
        - magenta_bg
        - cyan_bg
        - white_bg
      x-enum-varnames:
        - JsonMessagePartColorBold
        - JsonMessagePartColorUnderline
        - JsonMessagePartColorBlack
        - JsonMessagePartColorRed
        - JsonMessagePartColorGreen
        - JsonMessagePartColorYellow
        - JsonMessagePartColorBlue
        - JsonMessagePartColorMagenta
        - JsonMessagePartColorCyan
        - JsonMessagePartColorWhite
        - JsonMessagePartColorBlackBG
        - JsonMessagePartColorRedBG
        - JsonMessagePartColorGreenBG
        - JsonMessagePartColorYellowBG
        - JsonMessagePartColorBlueBG
        - JsonMessagePartColorMagentaBG
        - JsonMessagePartColorCyanBG
        - JsonMessagePartColorWhiteBG

    ItemHandlingFlag:
      type: integer
      enum:
        - 0b000
        - 0b001
        - 0b010
        - 0b100
      x-enum-varnames:
        - ItemHandlingFlagNone
        - ItemHandlingFlagOtherWorlds
        - ItemHandlingFlagOwnWorld
        - ItemHandlingFlagStartingInventory
      x-enum-descriptions:
        - No ReceivedItems is sent to you, ever.
        - Indicates you get items sent from other worlds.
        - Indicates you get items sent from your own world. Requires 0b001 to be set.
        - Indicates you get your starting inventory sent. Requires 0b001 to be set.

    HintStatus:
      description: |
        An enumeration containing the possible hint states.
        Hints for items with ItemClassification.trap default to HINT_AVOID.
        Hints created with LocationScouts, !hint_location, or similar (hinting a location) default to HINT_UNSPECIFIED.
        Hints created with !hint or similar (hinting an item for yourself) default to HINT_PRIORITY.
        Once a hint is collected, its' status is updated to HINT_FOUND automatically, and can no longer be changed.

      type: integer
      enum:
        - 0
        - 1
        - 10
        - 20
        - 30
      x-enum-varnames:
        - HintStatusFound
        - HintStatusUnspecified
        - HintStatusNoPriority
        - HintStatusAvoid
        - HintStatusPriority
      x-enum-descriptions:
        - The location has been collected. Status cannot be changed once found.
        - The receiving player has not specified any status
        - The receiving player has specified that the item is unneeded
        - The receiving player has specified that the item is detrimental
        - The receiving player has specified that the item is needed

    ClientStatus:
      description: |
        An enumeration containing the possible client states that may be used to inform the server in StatusUpdate. 
        The MultiServer automatically sets the client state to ClientStatus.CLIENT_CONNECTED on the first active connection to a slot.
      type: integer
      enum:
        - 0
        - 5
        - 10
        - 20
        - 30
      x-enum-varnames:
        - ClientStatusUnknown
        - ClientStatusConnected
        - ClientStatusReady
        - ClientStatusPlaying
        - ClientStatusGoal

    OperationKey:
      description: The following operations can be applied to a datastorage key
      type: string
      enum:
        - replace
        - default
        - add
        - mul
        - pow
        - mod
        - floor
        - ceil
        - max
        - min
        - and
        - or
        - xor
        - left_shift
        - right_shift
        - remove
        - pop
        - update
      x-enum-varnames:
        - OperationKeyReplace
        - OperationKeyDefault
        - OperationKeyAdd
        - OperationKeyMul
        - OperationKeyPow
        - OperationKeyMod
        - OperationKeyFloor
        - OperationKeyCeil
        - OperationKeyMax
        - OperationKeyMin
        - OperationKeyAnd
        - OperationKeyOr
        - OperationKeyXor
        - OperationKeyLeftShift
        - OperationKeyRightShift
        - OperationKeyRemove
        - OperationKeyPop
        - OperationKeyUpdate
      x-enum-descriptions:
        - Sets the current value of the key to value.
        - If the key has no value yet, sets the current value of the key to default of the Set's package (value is ignored).
        - Adds value to the current value of the key, if both the current value and value are arrays then value will be appended to the current value.
        - Multiplies the current value of the key by value.
        - Multiplies the current value of the key to the power of value.
        - Sets the current value of the key to the remainder after division by value.
        - Floors the current value (value is ignored).
        - Ceils the current value (value is ignored).
        - Sets the current value of the key to value if value is bigger.
        - Sets the current value of the key to value if value is lower.
        - Applies a bitwise AND to the current value of the key with value.
        - Applies a bitwise OR to the current value of the key with value.
        - Applies a bitwise Exclusive OR to the current value of the key with value.
        - Applies a bitwise left-shift to the current value of the key by value.
        - Applies a bitwise right-shift to the current value of the key by value.
        - "List only: removes the first instance of value found in the list."
        - "List or Dict: for lists it will remove the index of the value given. for dicts it removes the element with the specified key of value."
        - "Dict only: Updates the dictionary with the specified elements given in value creating new keys, or updating old ones if they previously existed."
